# adapted from https://github.com/nathanpeck/aws-cloudformation-fargate/

AWSTemplateFormatVersion: '2010-09-09'
Description: Deploy report-server on AWS Fargate, hosted in a public subnet, and accessible via a public load balancer.
Parameters:
  StackName:
    Type: String
    Default: fargate-public-network
    Description: The name of the parent Fargate networking stack that you created. Necessary
                 to locate and reference resources created by that stack.
  ServiceName:
    Type: String
    Default: report-server
    Description: A name for the service
  ImageUrl:
    Type: String
    Default: concordconsortium/report-server
    Description: The url of a docker image that contains the application process that
                 will handle the traffic for this service
  ContainerPort:
    Type: Number
    Default: 4000
    Description: What port number the application inside the docker container is binding to
  ContainerCpu:
    Type: Number
    Default: 1024
    Description: How much CPU to give the container. 1024 is 1 CPU
  ContainerMemory:
    Type: Number
    Default: 2048
    Description: How much memory in megabytes to give the container
  Path:
    Type: String
    Default: "/report-server*"
    Description: A path on the public load balancer that this service
                 should be connected to. This should NOT be *.
  PriorityForPath:
    Type: Number
    Default: 10
    Description: The priority for the path routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.   This CANNOT be the
                 same value as PriorityForHostname.
  PriorityForHostname:
    Type: Number
    Default: 11
    Description: The priority for the hostname routing rule added to the load balancer.
                 This only applies if your have multiple services which have been
                 assigned to different paths on the load balancer.  This CANNOT be the
                 same value as PriorityForPath.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many copies of the service task to run
  Subdomain:
    Type: String
    Default: report-server
    Description: The sub-domain to add to route (not apps) Route53 DNS record
  SecretKeyBase:
    Type: String
    Description: The secret base key for sessions - should be different between domains.  Use mix phx.gen.secret to generate.
  PortalUrl:
    Type: String
    Default: https://learn.concord.org
    Description: The default portal to authenticate to when there is no portal parameter.  Use "https://learn.portal.staging.concord.org"
                 for staging.
  TokenServiceUrl:
    Type: String
    Default: https://token-service-62822.firebaseapp.com/api/v1/resources
    Description: The token service url.  Use "https://token-service-staging.firebaseapp.com/api/v1/resources" for staging.
  ServerAccessKeyId:
    Type: String
    Description: The AWS access key id for the report-server user.  This can be found in 1Password.
  ServerSecretAccessKey:
    Type: String
    Description: The AWS secret access key for the report-server user.  This can be found in 1Password.
  ReportServiceUrl:
    Type: String
    Default: https://us-central1-report-service-pro.cloudfunctions.net/api
    Description: The url to the report service api. Use "https://us-central1-report-service-dev.cloudfunctions.net/api" for staging.
  ReportServiceToken:
    Type: String
    Description: The authentication token used to send commands to the report service.  This can be found in the report-service CF parameters.
  TokenServicePrivateBucket:
    Type: String
    Default: cc-student-work
    Description: The private bucket where the Token Service stores interactive attachments.  Use "token-service-files-private" for staging.
  OutputBucket:
    Type: String
    Default: report-server-output-prod
    Description: The private bucket where the report server will output processed jobs.  Use "report-server-output" for staging.
  JobsFolder:
    Type: String
    Default: jobs
    Description: The folder under the output bucket where jobs are stored.
  TranscriptsFolder:
    Type: String
    Default: transcripts
    Description: The folder under which the audio transcripts are stored.

Resources:

  # The task definition. This is a simple metadata description of what
  # container to run, and what resource requirements it has.
  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    DependsOn: LogGroup
    Properties:
      Family: !Ref 'ServiceName'
      Cpu: !Ref 'ContainerCpu'
      Memory: !Ref 'ContainerMemory'
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      ExecutionRoleArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ECSTaskExecutionRole']]
      ContainerDefinitions:
        - Name: !Ref 'ServiceName'
          Cpu: !Ref 'ContainerCpu'
          Memory: !Ref 'ContainerMemory'
          Image: !Ref 'ImageUrl'
          PortMappings:
            - ContainerPort: !Ref 'ContainerPort'
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-region: !Ref AWS::Region
              awslogs-group: !Ref LogGroup
              awslogs-stream-prefix: ecs
          Environment:
            - Name: SECRET_KEY_BASE
              Value: !Ref SecretKeyBase
            - Name: PORTAL_URL
              Value: !Ref PortalUrl
            - Name: TOKEN_SERVICE_URL
              Value: !Ref TokenServiceUrl
            - Name: SERVER_ACCESS_KEY_ID
              Value: !Ref ServerAccessKeyId
            - Name: SERVER_SECRET_ACCESS_KEY
              Value: !Ref ServerSecretAccessKey
            - Name: REPORT_SERVICE_URL
              Value: !Ref ReportServiceUrl
            - Name: REPORT_SERVICE_TOKEN
              Value: !Ref ReportServiceToken
            - Name: TOKEN_SERVICE_PRIVATE_BUCKET
              Value: !Ref TokenServicePrivateBucket
            - Name: OUTPUT_BUCKET
              Value: !Ref OutputBucket
            - Name: JOBS_FOLDER
              Value: !Ref JobsFolder
            - Name: TRANSCRIPTS_FOLDER
              Value: !Ref TranscriptsFolder
            - Name: PHX_HOST
              Value:
                Fn::Join:
                  - ''
                  - - !Ref Subdomain
                    - '.'
                    - Fn::ImportValue: !Join [':', [!Ref 'StackName', 'HostedZoneName']]

  LogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Join ['', [/ecs/, !Ref 'ServiceName']]

  # The service. The service is a resource which allows you to run multiple
  # copies of a type of task, and gather up their logs and metrics, as well
  # as monitor the number of running tasks and replace any that have crashed
  Service:
    Type: AWS::ECS::Service
    DependsOn:
      - LoadBalancerRule80Path
      - LoadBalancerRule443Path
      - LoadBalancerRule80Host
      - LoadBalancerRule443Host
    Properties:
      ServiceName: !Ref 'ServiceName'
      Cluster:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'ClusterName']]
      LaunchType: FARGATE
      DeploymentConfiguration:
        MaximumPercent: 200
        MinimumHealthyPercent: 75
      DesiredCount: !Ref 'DesiredCount'
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          SecurityGroups:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'FargateContainerSecurityGroup']]
            - !Ref ServiceSecurityGroup
          Subnets:
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetOne']]
            - Fn::ImportValue:
                !Join [':', [!Ref 'StackName', 'PublicSubnetTwo']]
      TaskDefinition: !Ref 'TaskDefinition'
      LoadBalancers:
        - ContainerName: !Ref 'ServiceName'
          ContainerPort: !Ref 'ContainerPort'
          TargetGroupArn: !Ref 'TargetGroup'

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Report server ECS service security group
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  # A target group. This is used for keeping track of all the tasks, and
  # what IP addresses / port numbers they have. You can query it yourself,
  # to use the addresses yourself, but most often this target group is just
  # connected to an application load balancer, or network load balancer, so
  # it can automatically distribute traffic across all the targets.
  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 6
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      TargetType: ip
      Name: !Ref 'ServiceName'
      Port: !Ref 'ContainerPort'
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'VPCId']]

  LoadBalancerRule80Path:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener80']]
      Priority: !Ref 'PriorityForPath'
  LoadBalancerRule443Path:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: path-pattern
          Values: [!Ref 'Path']
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener443']]
      Priority: !Ref 'PriorityForPath'

  LoadBalancerRule80Host:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values:
            - Fn::Join:
                - ''
                - - !Ref Subdomain
                  - '.'
                  - Fn::ImportValue: !Join [':', [!Ref 'StackName', 'HostedZoneName']]
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener80']]
      Priority: !Ref 'PriorityForHostname'

  LoadBalancerRule443Host:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'TargetGroup'
          Type: 'forward'
      Conditions:
        - Field: host-header
          Values:
            - Fn::Join:
                - ''
                - - !Ref Subdomain
                  - '.'
                  - Fn::ImportValue: !Join [':', [!Ref 'StackName', 'HostedZoneName']]
      ListenerArn:
        Fn::ImportValue:
          !Join [':', [!Ref 'StackName', 'PublicListener443']]
      Priority: !Ref 'PriorityForHostname'

  DNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName:
        Fn::Join:
          - ''
          - - Fn::ImportValue: !Join [':', [!Ref 'StackName', 'HostedZoneName']]
            - '.'
      Name:
        Fn::Join:
          - ''
          - - !Ref Subdomain
            - '.'
            - Fn::ImportValue: !Join [':', [!Ref 'StackName', 'HostedZoneName']]
      Type: A
      AliasTarget:
        DNSName:
          Fn::ImportValue: !Join [':', [!Ref 'StackName', 'LoadBalancerDNSName']]
        HostedZoneId:
          Fn::ImportValue: !Join [':', [!Ref 'StackName', 'LoadBalancerCanonicalHostedZoneID']]
