AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Web Service with load balancer and DNS Entry
Parameters:
  LoadBalancerIdleTimeout:
    Type: Number
    Description: how long in seconds load balancer should give idle connections.
  DomainName:
    Type: String
    Description: |
      the domain name to use for DNS entry for this service it must end with .concord.org
  ClusterSecurityGroupId:
    Type: String
    Description: |
      the security group id of the cluster, new rule will be added to this so the load
      blancer can send requests into the cluster
  ELBScheme:
    Type: String
    Default: internet-facing
    AllowedValues: [ 'internet-facing', 'internal']
    Description: Whether this load blancer exposes the a public ip address or an internal one.
      Internal ip addresses are useful internal microservices that only need to be accessed
      within the VPC.

Conditions:
  AddDNS: !Not [!Equals [!Ref DomainName, ""]]

Resources:
  ELBv2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [subnet-13a1133d,subnet-2d925713]
      SecurityGroups: [!Ref 'LoadBalancerSG']
      Scheme: !Ref ELBScheme
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: !Ref 'LoadBalancerIdleTimeout'

  ELBDNS:
    Type: AWS::Route53::RecordSet
    Condition: AddDNS
    Properties:
      AliasTarget:
        DNSName: !GetAtt ELBv2.DNSName
        HostedZoneId: !GetAtt ELBv2.CanonicalHostedZoneID
      HostedZoneName: concordqa.org.
      Name: !Ref DomainName
      Type: A
      Weight: 100
      SetIdentifier: CloudFormation ecs-load-balancer

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for load balancer
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: vpc-c116d1bb

  ClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSecurityGroupId'
      IpProtocol: tcp
      # these are the ephemerial ports created dyanmically when the task is
      # deployed on the container instance
      FromPort: '32768'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'

Outputs:
  ELBDNSName:
    Value: !GetAtt ELBv2.DNSName
    Description: DNS name of the load balancer
  CanonicalHostedZoneID:
    Value: !GetAtt ELBv2.CanonicalHostedZoneID
    Description: HostedZone of the load balancer (needed for alias DSN targets)
  LoadBalancer:
    Value: !Ref ELBv2
    Description: ARN of the target group created by this nested stack
  LoadBalancerEndingId:
    Value: !Select [ 2, !Split [ '-', !GetAtt ELBv2.LoadBalancerName]]
    Description: The last part of the load balancer name. This can be used to make unique
      names for things that depend on the load balancer.
