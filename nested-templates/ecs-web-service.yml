AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Web Service with load balancer and DNS Entry
Parameters:
  ShortName:
    Type: String
    Description: This is used to provide better labels for ELBTargetGroup. Unfortunately
      this can't be used for the LoadBalancer name because there isn't an easy way to
      guarantee uniqueness. It should be no more than 17 characters.
    MaxLength: '17'
  LoadBalancerIdleTimeout:
    Type: Number
    Description: how long in seconds load balancer should give idle connections.
  HealthCheckIntervalSeconds:
    Type: Number
    Description: How often in seconds to do a health check
  HealthCheckPath:
    Type: String
    Description: path on the service to check for healthiness
    Default: '/'
  HealthyThresholdCount:
    Type: Number
    Description: How many healthy health checks, before marking the task healthy.
  UnhealthyThresholdCount:
    Type: Number
    Description: How many unhealthy health checks, before marking task as unhealthy.
  HealthCheckTimeoutSeconds:
    Type: Number
    Description: How many seconds to wait for the healthcheck to return
  DeregistrationDelay:
    Type: Number
    Description: |
      The amount time for Elastic Load Balancing to wait before changing the state of a
      deregistering target from draining to unused.
  DomainName:
    Type: String
    Description: |
      the domain name to use for DNS entry for this service it must end with .concord.org
  TaskDefinition:
    Type: String
    Description: identifier for the task definition used by this service
  DesiredTaskCount:
    Type: Number
    Description: Initial number of tasks in the service
  ContainerName:
    Type: String
    Description: The name of the container in the task that the load balancer should point at
  ContainerPort:
    Type: Number
    Description: The internal port of the container that should be load balanced
    Default: '80'
  ClusterName:
    Type: String
    Description: name of cluster for the new service
  ClusterSecurityGroupId:
    Type: String
    Description: |
      the security group id of the cluster, new rule will be added to this so the load
      blancer can send requests into the cluster
  ELBScheme:
    Type: String
    Default: internet-facing
    AllowedValues: [ 'internet-facing', 'internal']
    Description: Whether this load blancer exposes the a public ip address or an internal one.
      Internal ip addresses are useful internal microservices that only need to be accessed
      within the VPC.

Conditions:
  AddDNS: !Not [!Equals [!Ref DomainName, ""]]

Resources:
  ELBv2:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: [subnet-13a1133d,subnet-2d925713,subnet-2d925713]
      SecurityGroups: [!Ref 'LoadBalancerSG']
      Scheme: !Ref ELBScheme
      LoadBalancerAttributes:
      - Key: idle_timeout.timeout_seconds
        Value: !Ref 'LoadBalancerIdleTimeout'

  ELBTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: !Ref 'HealthCheckIntervalSeconds'
      HealthCheckProtocol: HTTP
      HealthCheckPath: !Ref 'HealthCheckPath'
      HealthyThresholdCount: !Ref 'HealthyThresholdCount'
      UnhealthyThresholdCount: !Ref 'UnhealthyThresholdCount'
      HealthCheckTimeoutSeconds: !Ref 'HealthCheckTimeoutSeconds'
      # even though this is set to 80 the actual port will
      # be overriden by each of the containers that is added
      # to the target group
      Port: '80'
      Protocol: HTTP
      TargetGroupAttributes:
      - Key: deregistration_delay.timeout_seconds
        Value: !Ref 'DeregistrationDelay'
      VpcId: vpc-c116d1bb
      # Use this name property to force the TargetGroup to be recreated whenever the load
      # balancer is recreated. Otherwise CloudFormation tries to add the TargetGroup
      # to the new load balancer before removing it from the old one. And that results
      # in an error.
      Name: !Join
      - '-'
      - - !Ref ShortName
        - !Select [ 2, !Split [ '-', !GetAtt ELBv2.LoadBalancerName]]

  # we might want to use https://github.com/coreos/docker-nginx-https-redirect
  # or something similiar to handle the https redirect, then we don't need to mess with
  # the application code itself

  ELBDNS:
    Type: AWS::Route53::RecordSet
    Condition: AddDNS
    Properties:
      AliasTarget:
        DNSName: !GetAtt [ELBv2, DNSName]
        HostedZoneId: !GetAtt [ELBv2, CanonicalHostedZoneID]
      HostedZoneName: concordqa.org.
      Name: !Ref 'DomainName'
      Type: A

  WebService:
    # CloudFormation uses the name of the parent stack hyphen the name of the
    # Stack Resource pointing at this nested stack. So this is named well
    Type: AWS::ECS::Service
    # The docs recommend adding a dependency on the load balancer listener hear
    # but I don't see why that is necessary so were are trying without it...
    Properties:
      Role: 'ecsServiceRole'
      TaskDefinition: !Ref 'TaskDefinition'
      DesiredCount: !Ref 'DesiredTaskCount'
      LoadBalancers:
      - TargetGroupArn: !Ref "ELBTargetGroup"
        ContainerPort: !Ref 'ContainerPort'
        ContainerName: !Ref 'ContainerName'
      Cluster: !Ref 'ClusterName'

  LoadBalancerSG:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: security group for load balancer
      SecurityGroupEgress:
      - IpProtocol: '-1'
        CidrIp: 0.0.0.0/0
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: '80'
        ToPort: '80'
        CidrIp: 0.0.0.0/0
      - IpProtocol: tcp
        FromPort: '443'
        ToPort: '443'
        CidrIp: 0.0.0.0/0
      VpcId: vpc-c116d1bb

  ClusterIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref 'ClusterSecurityGroupId'
      IpProtocol: tcp
      # these are the ephemerial ports created dyanmically when the task is
      # deployed on the container instance
      FromPort: '32768'
      ToPort: '61000'
      SourceSecurityGroupId: !Ref 'LoadBalancerSG'

Outputs:
  Name:
    Value: !GetAtt WebService.Name
    Description: Name of the created web service
  ELBDNSName:
    Value: !GetAtt ELBv2.DNSName
    Description: DNS name of the load balancer
  CanonicalHostedZoneID:
    Value: !GetAtt ELBv2.CanonicalHostedZoneID
    Description: HostedZone of the load balancer (needed for alias DSN targets)
  TargetGroup:
    Value: !Ref ELBTargetGroup
    Description: ARN of the target group created by this nested stack
  LoadBalancer:
    Value: !Ref ELBv2
    Description: ARN of the target group created by this nested stack
  LoadBalancerEndingId:
    Value: !Select [ 2, !Split [ '-', !GetAtt ELBv2.LoadBalancerName]]
    Description: The last part of the load balancer name. This can be used to make unique
      names for things that depend on the load balancer.
